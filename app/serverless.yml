service: "marseille"

provider:
  name: "aws"
  deploymentBucket: "${env:MARSEILLE_DEPLOY}"
  runtime: "python3.8"
  stage: "${opt:stage}"
  region: "${env:AWS_DEFAULT_REGION}"
  memorySize: 256
  timeout: 30
  apiKeys:
    - name: "MarseilleKey"
      value: "${env:MARSEILLE_KEY}"
      description: "MarseilleKey"
      usagePlan:
        name: "Public Marseille Api Key"
        description: "Public Marseille Api Key"
        quota:
          limit: 3000
          period: "DAY"
        throttle:
          burstLimit: 40
          rateLimit: 20

package:
  exclude:
    - ".*.swp"
    - "fixtures/**"
    - "sanity/**"
    - "test_**"
    - "../libs/test_**"
    - "../libs/README.md"
    - "../libs/__pycache__"
    - "README.md"
    - "serverless.yml"
    - "__pycache__/**"
    - "requirements.txt"
    - "node_modules/**"
    - "package.json"
    - "package.json.lock()"

functions:

  # ----------------------------------------------
  # LIST PRODUCTS
  # ----------------------------------------------
  products:
    handler: "main.products"
    events:
      - http:
          path: "v1/products"
          method: "get"
          private: true
          cors:
            origin: '*'
            headers:
              - 'Content-Type'
              - 'X-Amz-Date'
              - 'Authorization'
              - 'X-Api-Key'
              - 'X-Amz-Security-Token'
              - 'X-Amz-User-Agent'
            allowCredentials: false
          response:
            headers:
              Access-Control-Allow-Origin: "*"
              # Access-Control-Allow-Credentials: true
    environment:
      MARSEILLE_SHOP: "${env:MARSEILLE_SHOP}"
      MARSEILLE_USER: "${env:MARSEILLE_USER}"
      MARSEILLE_PASS: "${env:MARSEILLE_PASS}"

  # ----------------------------------------------
  # GET PRODUCT
  # ----------------------------------------------
  product:
    handler: "main.product"
    events:
      - http:
          path: "v1/products/:id"
          method: "get"
          private: true
          cors:
            origin: '*'
            headers:
              - 'Content-Type'
              - 'X-Amz-Date'
              - 'Authorization'
              - 'X-Api-Key'
              - 'X-Amz-Security-Token'
              - 'X-Amz-User-Agent'
            allowCredentials: false
          response:
            headers:
              Access-Control-Allow-Origin: "*"
              # Access-Control-Allow-Credentials: true
    environment:
      MARSEILLE_SHOP: "${env:MARSEILLE_SHOP}"
      MARSEILLE_USER: "${env:MARSEILLE_USER}"
      MARSEILLE_PASS: "${env:MARSEILLE_PASS}"

resources:
  Resources:

    # CORS FOR 4XX
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: 'DEFAULT_4XX'
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    # CORS FOR 5XX
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: 'DEFAULT_5XX'
        RestApiId:
          Ref: 'ApiGatewayRestApi'

plugins:
  - "serverless-python-requirements"
  - "serverless-pseudo-parameters"

custom:
  pythonRequirements:
    dockerizePip: false
